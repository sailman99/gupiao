//

package com.gupiao.web.tools;

import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Properties;

import javax.imageio.ImageIO;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;


import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.params.HttpMethodParams;

import com.gupiao.model.persist.entity.Inoutprice;







public class MyTools {
	
	 public static String getJiaoYiShuoYahoo(String gupiaodaima){//返回交易所简称
			if(MyTools.StrToDouble(gupiaodaima).intValue()<600000)
			{
				return "SZ";
			}else{
				return "SS";
			}
		}
	public static String inputStream2String(InputStream is){ 
		   if(!is.equals(null)){
			   BufferedReader in = new BufferedReader(new InputStreamReader(is)); 
			   StringBuffer buffer = new StringBuffer(); 
			   String line = ""; 
			   try{
				   while ((line = in.readLine()) != null){ 
				     buffer.append(line); 
				   }
			   }
			   catch(Exception e){
				   
			   }
			   return buffer.toString();
		   }
		   else return "";
	} 
	public static InputStream readHttmnew(String destUrl) throws IOException{
		ByteArrayInputStream bais = null;
		BufferedInputStream bis = null;
	    HttpURLConnection httpUrl = null;
	    URL url = null;
	    
	    //建立链接
	    try{
		    url = new URL(destUrl);
		   // System.out.println(destUrl);
		    httpUrl = (HttpURLConnection) url.openConnection();
		    httpUrl.setRequestProperty("Cookie", "userid=179275&password=FoEi85zsbqGBClcI1YZQWtoa665CZ8ftFj4d517D6w1mdldYF016SQ%3d%3d&tpp=0&ppp=0&pmsound=0&invisible=0&referer=index.aspx&sigstatus=0&expires=5256000");
		    // httpUrl.setFollowRedirects(true);
		    httpUrl.setRequestMethod("GET"); 
		    httpUrl.setRequestProperty("User-Agent","Mozilla/4.0 (compatible; MSIE 6.0; Windows 2000)");
		   
		    //连接指定的资源
		    httpUrl.connect();
		    //获取网络输入流
		    bis = new BufferedInputStream(httpUrl.getInputStream());
		    
		    //is = new InputStream(bis);
		    
		   
		    ByteArrayOutputStream swapStream = new ByteArrayOutputStream();

		    byte[] buff = new byte[100]; //buff用于存放循环读取的临时数据

		    int rc = 0;

		    while ((rc = bis.read(buff, 0, 100)) > 0) {

		    	swapStream.write(buff, 0, rc);

		    }
		    bais  = new ByteArrayInputStream(swapStream.toByteArray());   
		    if(!bis.equals(null)) bis.close();
	    }
	    catch(Exception e){
	    	
	    }
	    
	    
	    httpUrl.disconnect();
	    return bais;
		
	}
	
	public static String readHttm(String url){
		
		
		
		
		   
		//取出网页内容
		String str = null;
//		 构造HttpClient的实例
		HttpClient httpClient = new HttpClient();
	//	httpClient.getParams().setParameter(
	//		      HttpMethodParams.HTTP_CONTENT_CHARSET, "GBK");
		// 创建GET方法的实例
		
		GetMethod getMethod = new GetMethod(url);
		// 使用系统提供的默认的恢复策略
		getMethod.getParams().setParameter(HttpMethodParams.RETRY_HANDLER,
				new DefaultHttpMethodRetryHandler());
		try {
			// 执行getMethod
			int statusCode = httpClient.executeMethod(getMethod);
//			if (statusCode != HttpStatus.SC_OK) {
//				System.err.println("Method failed: "
//						+ getMethod.getStatusLine());
//			}


			if (statusCode == HttpStatus.SC_OK) {

				// 读取内容

				byte[] responseBody = getMethod.getResponseBody();
				//BufferedReader in = new BufferedReader(new InputStreamReader(get.getResponseBodyAsStream(),get.getResponseCharSet()));
				// 处理内容
				str=new String(responseBody);
			}
		} catch (HttpException e) {
			// 发生致命的异常，可能是协议不对或者返回的内容有问题
			System.out.println("Please check your provided http address!");
			e.printStackTrace();
		} catch (IOException e) {
			// 发生网络异常
			e.printStackTrace();
		} finally {
			// 释放连接
			getMethod.releaseConnection();
		}
			return str;
	}
	 public static String jieXiip_loveroot(String str){
	    	int position;
	    	position = str.indexOf("官方数据查询结果：");
	    	if( position>0) {
	    		str=str.substring(position+10);
	    		position = str.indexOf("&nbsp;");
	    		if(position>0){
	    			str=str.substring(0,position);
	    			return str;
	    		}
	    	}
	    	return null;
	}
	public static class Chichuangxinxi_tmp{
		private Double sanhu;
		private Double zhonghu;
		private Double dahu;
		private Double faren;
		private Double jigou;
		public Double getSanhu() {
			return sanhu;
		}
		public void setSanhu(Double sanhu) {
			this.sanhu = sanhu;
		}
		public Double getZhonghu() {
			return zhonghu;
		}
		public void setZhonghu(Double zhonghu) {
			this.zhonghu = zhonghu;
		}
		public Double getDahu() {
			return dahu;
		}
		public void setDahu(Double dahu) {
			this.dahu = dahu;
		}
		public Double getFaren() {
			return faren;
		}
		public void setFaren(Double faren) {
			this.faren = faren;
		}
		public Double getJigou() {
			return jigou;
		}
		public void setJigou(Double jigou) {
			this.jigou = jigou;
		}
		
	}
	public static class PositionXY{
		
//		量帐号分类
		private int[] lzhfl={};
		private int   lzhfl_width=60;//量帐号分类gif图的width
		private int   lzhfl_height=14;//量帐号分类gif图的height
//		分类持仓
		private int[] flcq={};
		private int   flcq_width=48;//分类持仓gif图的width
		private int   flcq_height=14;//分类持仓gif图的height
//		识别数字关键点
		private int[] gjd={};
		private int   gjd_width=10;//关键点gif图的width
		private int   gjd_height=6;//关键点gif图的height
		
		//帐户数
		private int[] zfs={};
		private int   zfs_width=36;//帐户数gif图的width
		private int   zfs_height=14;//帐户数gif图的height
		
		
		private int X1;//散户数X坐标
		private int X2;//中户数X坐标
		private int X3;//大户数X坐标
		private int X4;//超大户数X坐标
		private int Y1;//股东数的Y坐标
		private int X11;//散户比例X坐标
		private int X12;//中户比例X坐标
		private int X13;//大户比例X坐标
		private int X14;//法人比例X坐标
		private int X15;//机构比例X坐标
		private int Y11;//比例Y坐标
		private int X;//临时用的
		private int Y;//临时用的
		
		private int gif_width;//gif图片width
		private int gif_height;//gif图片heigth
		
		
		
		
		public int getGif_height() {
			return gif_height;
		}
		public void setGif_height(int gif_height) {
			this.gif_height = gif_height;
		}
		public int getGif_width() {
			return gif_width;
		}
		public void setGif_width(int gif_width) {
			this.gif_width = gif_width;
		}
		public int[] getZfs() {
			return zfs;
		}
		public void setZfs(int[] zfs) {
			this.zfs = zfs;
		}
		public int getZfs_height() {
			return zfs_height;
		}
		public void setZfs_height(int zfs_height) {
			this.zfs_height = zfs_height;
		}
		public int getZfs_width() {
			return zfs_width;
		}
		public void setZfs_width(int zfs_width) {
			this.zfs_width = zfs_width;
		}
		public int[] getGjd() {
			return gjd;
		}
		public void setGjd(int[] gjd) {
			this.gjd = gjd;
		}
		public int getGjd_height() {
			return gjd_height;
		}
		public void setGjd_height(int gjd_height) {
			this.gjd_height = gjd_height;
		}
		public int getGjd_width() {
			return gjd_width;
		}
		public void setGjd_width(int gjd_width) {
			this.gjd_width = gjd_width;
		}
		public int[] getFlcq() {
			return flcq;
		}
		public void setFlcq(int[] flcq) {
			this.flcq = flcq;
		}
		public int getFlcq_height() {
			return flcq_height;
		}
		public void setFlcq_height(int flcq_height) {
			this.flcq_height = flcq_height;
		}
		public int getFlcq_width() {
			return flcq_width;
		}
		public void setFlcq_width(int flcq_width) {
			this.flcq_width = flcq_width;
		}
		public int[] getLzhfl() {
			return lzhfl;
		}
		public void setLzhfl(int[] lzhfl) {
			this.lzhfl = lzhfl;
		}
		public int getLzhfl_height() {
			return lzhfl_height;
		}
		public void setLzhfl_height(int lzhfl_height) {
			this.lzhfl_height = lzhfl_height;
		}
		public int getLzhfl_width() {
			return lzhfl_width;
		}
		public void setLzhfl_width(int lzhfl_width) {
			this.lzhfl_width = lzhfl_width;
		}
		public int hashCode(){
			return   1;   
		} 
		public boolean equals(PositionXY positionxy){
			if(this.X1==positionxy.X1 && this.X2==positionxy.X2 && this.X3==positionxy.X3 && this.X4==positionxy.X4)
			return true;
			return false;
		}
		public int getX() {
			return X;
		}
		public void setX(int x) {
			X = x;
		}
		public int getX1() {
			return X1;
		}
		public void setX1(int x1) {
			X1 = x1;
		}
		public int getX11() {
			return X11;
		}
		public void setX11(int x11) {
			X11 = x11;
		}
		public int getX12() {
			return X12;
		}
		public void setX12(int x12) {
			X12 = x12;
		}
		public int getX13() {
			return X13;
		}
		public void setX13(int x13) {
			X13 = x13;
		}
		public int getX14() {
			return X14;
		}
		public void setX14(int x14) {
			X14 = x14;
		}
		public int getX15() {
			return X15;
		}
		public void setX15(int x15) {
			X15 = x15;
		}
		public int getX2() {
			return X2;
		}
		public void setX2(int x2) {
			X2 = x2;
		}
		public int getX3() {
			return X3;
		}
		public void setX3(int x3) {
			X3 = x3;
		}
		public int getX4() {
			return X4;
		}
		public void setX4(int x4) {
			X4 = x4;
		}
		public int getY() {
			return Y;
		}
		public void setY(int y) {
			Y = y;
		}
		public int getY1() {
			return Y1;
		}
		public void setY1(int y1) {
			Y1 = y1;
		}
		public int getY11() {
			return Y11;
		}
		public void setY11(int y11) {
			Y11 = y11;
		}
		
		
		
		
	}
	public static PositionXY position(BufferedImage bi,int[] png,int i_begin,int i_leng,int k_begin,int k_leng,int width,int height){
		
		/*
		 * 匹配图片，返回匹配起始位置
		 * bi 图片
		 * png匹配图片数组
		 * i_begin从bi 图片这一点Ｘ坐标开始匹配
		 * k_begin从bi 图片这一点Ｙ坐标开始匹配
		 * width匹配图片的宽
		 * height匹配图片的高
		*/
		
		boolean find = false;//是否已经匹配
		int int_tmp=0;
		PositionXY positionxy=new PositionXY();
		int tar_width = bi.getWidth();//传来图片的宽
		int tar_height = bi.getHeight();//传来图片的高
		
		int i_minleng=i_leng>tar_width?tar_width:i_leng;
		int k_minleng=k_leng>tar_height?tar_height:k_leng;
		
		
		
		
		for(int i=i_begin;i<i_minleng-width;i++){//从指定的X坐标开始匹配,到..为止
    		for(int k=k_begin;k<k_minleng-height;k++){//从指定的Y坐标开始匹配,到..为止
    			int count=0;//匹配点数计数
    			for(int m=0;m<width;m++){//一行width点
    				boolean breakout=false;//如果不匹配，再跳出这一层
    				for(int n=0;n<height;n++){//一列height点
    					int_tmp=bi.getRGB(i+m, k+n);
    					//System.out.println(count);
    					//if(int_tmp!=png[count])//如果不匹配,跳出一列FOR语句
    					if(!(((int_tmp<-10000000)&&(png[count]<-10000000))||((int_tmp>-10000000)&&(png[count]>-10000000))))//同时小于或大于才成立
    					{
    						//count=0;
    						breakout=true;
    						break;
    					}
    					count++;
    				}
    				if(breakout){
    					break;//跳出
    				}
    			}
    			if (count==width*height){//完全匹配
    				//System.out.println(count);    				
    				positionxy.setX(i);
    				positionxy.setY(k);
    				find = true;//匹配
    				break;//跳出
    			}
    		}
    		if(find){
    			break;//再跳出
    		}	
    		
    	}
		return positionxy;

		
	}
	public static int position_X(BufferedImage bi,int i_begin,int k_begin) {
		/*
		 * 定点股东数及比例开始位置
		 */
		int int_position_x=0;
		
		int int_tmp[]=new int[60];
		for(int i=i_begin;i<bi.getWidth()-6;i++){
			int count=0;//计数
			for(int m=0;m<6;m++){//一行width点
				for(int n=0;n<10;n++){//一列height点
					int_tmp[count]=bi.getRGB(i+m,k_begin+n);
					count++;
			    	}
			}
			if(MyTools.comparisonGIF(int_tmp)!=null){
				int_position_x = i;
				break;
			}
		}
		return int_position_x;
			
	}

	public static PositionXY initPositionXY(BufferedImage bi,PositionXY po) throws Exception{//定位各种数据的初始位置
		
		PositionXY positionxy,tmp_positionxy ;
		int maxpix=10000;
		positionxy = po;
		tmp_positionxy = po;
		/*
		positionxy=position(bi,positionxy.getLzhfl(),0,maxpix,0,maxpix,positionxy.getLzhfl_width(),positionxy.getLzhfl_height());//定位量帐号分类，Ｘ，Ｙ坐标设置在PositionXY.X,PositionXY.Y
		if(positionxy.getX()==0){
			return positionxy;
		}
		//定位帐户数
		positionxy=position(bi,positionxy.getZfs(),positionxy.getX()-140,maxpix,positionxy.getY(),maxpix,positionxy.getZfs_width(),positionxy.getZfs_height());//定位帐户数，Ｘ，Ｙ坐标设置在PositionXY.X,PositionXY.Y,用关键点定位
		if(positionxy.getX()==0){
			return positionxy;
		}
		
		
		 
		
		positionxy=position(bi,positionxy.getGjd(),positionxy.getX(),maxpix,positionxy.getY()-15,positionxy.getY()-15+40,positionxy.getGjd_width(),positionxy.getGjd_height());//定位关键点,定位比例，Ｘ，Ｙ坐标设置在PositionXY.X,PositionXY.Y,用关键点定位
		if(positionxy.getX()==0){
			return positionxy;
		}
		
		//定位股东数位置,设置在X1，X2,X3,X4,Y1
		positionxy.setX1(position_X(bi,positionxy.getX(),positionxy.getY()+5));//试验得到的数据，Ｙ轴向下位移５个单位
		positionxy.setX2(position_X(bi,positionxy.getX1()+42,positionxy.getY()+5));//最长为７个字
		positionxy.setX3(position_X(bi,positionxy.getX2()+42,positionxy.getY()+5));//最长为７个字
		positionxy.setX4(position_X(bi,positionxy.getX3()+42,positionxy.getY()+5));//最长为７个字
		positionxy.setY1(positionxy.getY()+5);
		
		*/
		tmp_positionxy=position(bi,tmp_positionxy.getFlcq(),0,maxpix,0,maxpix,tmp_positionxy.getFlcq_width(),tmp_positionxy.getFlcq_height());//定位分类持仓，Ｘ，Ｙ坐标设置在PositionXY.X,PositionXY.Y
		//System.out.println(tmp_positionxy.getX());
		if(tmp_positionxy.getX()==0){
			return tmp_positionxy;
		}
		
		tmp_positionxy=position(bi,tmp_positionxy.getZfs(),tmp_positionxy.getX()-200,maxpix,tmp_positionxy.getY(),maxpix,tmp_positionxy.getZfs_width(),tmp_positionxy.getZfs_height());//定位帐户数，Ｘ，Ｙ坐标设置在PositionXY.X,PositionXY.Y,用关键点定位
		//System.out.println(tmp_positionxy.getX());
		if(tmp_positionxy.getX()==0){
			return tmp_positionxy;
		}
		
		
		tmp_positionxy=position(bi,tmp_positionxy.getGjd(),tmp_positionxy.getX(),maxpix,tmp_positionxy.getY()-15,tmp_positionxy.getY()-15+40,tmp_positionxy.getGjd_width(),tmp_positionxy.getGjd_height());//定位关键点,定位比例，Ｘ，Ｙ坐标设置在PositionXY.X,PositionXY.Y,用关键点定位
		//System.out.println(tmp_positionxy.getX());
		if(tmp_positionxy.getX()==0){
			return tmp_positionxy;
		}
		//定位比例位置,设置在X11,X12,X13,X14,X15,Y11
		positionxy.setX11(position_X(bi,tmp_positionxy.getX(),tmp_positionxy.getY()-10));//试验得到的数据，Ｙ轴向上位移10个单位
		positionxy.setX12(position_X(bi,positionxy.getX11()+30,tmp_positionxy.getY()-10));//最长为5个字
		positionxy.setX13(position_X(bi,positionxy.getX12()+30,tmp_positionxy.getY()-10));//最长为5个字
		positionxy.setX14(position_X(bi,positionxy.getX13()+30,tmp_positionxy.getY()-10));//最长为5个字
		positionxy.setX15(position_X(bi,positionxy.getX14()+30,tmp_positionxy.getY()-10));//最长为5个字
		positionxy.setY11(tmp_positionxy.getY()-10);
		return positionxy;
	}

	public static Double getGuDongShu(BufferedImage bi,int X,int Y,int maxcharcount){//从ＰＮＧ图片文件中读取获利盘信息
		/*
		 * 从流中读取各种数据
		 * is文件输入流
		 * X,Y读取的起始坐标
		 * maxcharcount最大可读取字符数
		 * 
		 */

		
		
        String str_tmp="";
        int int_tmp[]=new int[60];
        
        try{
        	
        	
        	for(int i=0;i<maxcharcount;i++){//最多读取maxcharcount个
        		for(int m=0;m<6;m++){//图片大小是6*10
        			for(int n=0;n<10;n++){
        				int_tmp[10*m+n]=bi.getRGB(X+m+6*i, Y+n);   //     				
        			}
        		}
        		String tmp=comparisonGIF(int_tmp);
        		if(tmp==null){
        			break;
        		}
        		str_tmp=str_tmp+tmp;
        	}
            
        }
        catch(Exception e)
        {
        	System.out.println(e.getMessage());
        }

		return StrToDouble(str_tmp);
	}
	
	public static String comparisonGIF(int[] int_tmp) {  //比较GIF图片
		
		String tmp=null;
	
		
		for(int i=0;i<int_tmp.length;i++){
			if (int_tmp[i]<-10000000)
			{
				int_tmp[i]=-16777216;
			}
			else
			{
				int_tmp[i]=-7894906;
			}
		}
		/*
		int[] png0={};
		int[] png1={};
		int[] png2={};
		int[] png3={};
		int[] png4={};
		int[] png5={};
		int[] png6={};
		int[] png7={};
		int[] png8={};
		int[] png9={};
	//	int[] pngx={};
		int[] pngdot={};
		*/
		
		
		
		
//		数字1    6*10
		int[] png1={};

		//数字2    6*10
		int[] png2={};

		//数字3    6*10
		int[] png3={-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-7894906,-16777216,-16777216,-16777216,-16777216,-7894906,-16777216,-16777216,-16777216,-7894906,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-7894906,-16777216,-16777216,-7894906,-16777216,-16777216,-7894906,-16777216,-16777216,-16777216,-7894906,-16777216,-16777216,-7894906,-16777216,-16777216,-7894906,-16777216,-16777216,-16777216,-7894906,-16777216,-16777216,-16777216,-7894906,-7894906,-16777216,-7894906,-7894906,-7894906,-16777216,-16777216};

		//		数字4   6*10
		int[] png4={};
		
		
		//数字5    6*10

		int[] png5={};


		//数字6    6*10
		int[] png6={};

		
		//数字7    6*10
		int[] png7={};

		
		//数字8    6*10
		int[] png8={};


		//数字9    6*10
		int[] png9={};


//		数字0   6*10
		int[] png0={};


		//数字dot   6*10
		int[] pngdot={};
		
		
		
		if(Arrays.equals(int_tmp, png0)){
			tmp="0";
		}
		if(Arrays.equals(int_tmp, png1)){
			tmp="1";
		}
		if(Arrays.equals(int_tmp, png2)){
			tmp="2";
		}
		if(Arrays.equals(int_tmp, png3)){
			tmp="3";
		}
		if(Arrays.equals(int_tmp, png4)){
			tmp="4";
		}
		if(Arrays.equals(int_tmp, png5)){
			tmp="5";
		}
		if(Arrays.equals(int_tmp, png6)){
			tmp="6";
		}
		if(Arrays.equals(int_tmp, png7)){
			tmp="7";
		}
		if(Arrays.equals(int_tmp, png8)){
			tmp="8";
		}
		if(Arrays.equals(int_tmp, png9)){
			tmp="9";
		}
		//if(Arrays.equals(int_tmp,pngx)){
		//	tmp="X";
		//}
		if(Arrays.equals(int_tmp, pngdot)){
			tmp=".";
		}
		return tmp;
	}
	
	
	
	
	
	
	
	
	
	public static String comparisonPNG(BufferedImage bi) throws Exception{  //比较ＰＮＧ图片
		
		String tmp=null;
		int m = 0;
		int int_tmp[]=new int[72];
		int[] png0={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-16777216,-16777216,-1,-1,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-16777216,-16777216,-1,-1,-1,-1};
		int[] png1={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-1,-1};
		int[] png2={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-16777216,-16777216,-1,-1,-1,-1,-16777216,-1,-1};
		int[] png3={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-16777216,-16777216,-1,-16777216,-16777216,-16777216,-1,-1,-1};
		int[] png4={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-16777216,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-1,-1,-16777216,-1,-1,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-16777216,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1};
		int[] png5={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-16777216,-16777216,-1,-1,-16777216,-1,-1,-1,-1,-1,-16777216,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-16777216,-16777216,-16777216,-16777216,-1,-1,-1};
		int[] png6={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-16777216,-16777216,-16777216,-1,-1,-1,-1,-1,-1,-16777216,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-16777216,-16777216,-16777216,-1,-1,-1};
		int[] png7={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-16777216,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-16777216,-16777216,-1,-1,-1,-1,-1,-1,-16777216,-1,-16777216,-16777216,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-1,-1,-1,-1,-1,-1,-1,-1};
		int[] png8={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-1,-16777216,-16777216,-16777216,-1,-1,-1,-1,-1,-16777216,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-1,-1,-1,-16777216,-16777216,-1,-16777216,-16777216,-16777216,-1,-1,-1};
		int[] png9={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-16777216,-1,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-1,-16777216,-1,-1,-1,-1,-16777216,-1,-1,-1,-16777216,-1,-16777216,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-16777216,-16777216,-16777216,-1,-1,-1,-1};
		int[] pngdot={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-16777216,-16777216,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
		for(int i=0;i<6;i++){
    		for(int k=0;k<12;k++){
    			int_tmp[m]=bi.getRGB(i, k);
    			m++;
    		}
    	}
		
		if(Arrays.equals(int_tmp, png0)){
			tmp="0";
		}
		if(Arrays.equals(int_tmp, png1)){
			tmp="1";
		}
		if(Arrays.equals(int_tmp, png2)){
			tmp="2";
		}
		if(Arrays.equals(int_tmp, png3)){
			tmp="3";
		}
		if(Arrays.equals(int_tmp, png4)){
			tmp="4";
		}
		if(Arrays.equals(int_tmp, png5)){
			tmp="5";
		}
		if(Arrays.equals(int_tmp, png6)){
			tmp="6";
		}
		if(Arrays.equals(int_tmp, png7)){
			tmp="7";
		}
		if(Arrays.equals(int_tmp, png8)){
			tmp="8";
		}
		if(Arrays.equals(int_tmp, png9)){
			tmp="9";
		}
		if(Arrays.equals(int_tmp, pngdot)){
			tmp=".";
		}
		return tmp;
	}
	
	public static Chichuangxinxi_tmp jieXiChichuangxinxi(InputStream is,PositionXY positionxy) throws Exception{

		/*
		 * 
		 * positionxy 要读取的各种数据的位置
		 * positionxy.X1散户数
		 * positionxy.X2中户数
		 * positionxy.X3大户数
		 * positionxy.X4超大户数
		 * positionxy.Y1
		 * positionxy.X11
		 * positionxy.X12
		 * positionxy.X13
		 * positionxy.X14
		 * positionxy.X15
		 * positionxy.Y11
		 */
		
		
        
		Chichuangxinxi_tmp chichuangxinxi_tmp=new Chichuangxinxi_tmp() ;
        try{
        	
        	
//        	 取得图片读入流
        	
        	BufferedImage bi = ImageIO.read(is);
        	
        	
           
        	
        
            //散户比例           
             
        	chichuangxinxi_tmp.setSanhu(getGuDongShu(bi,positionxy.getX11(),positionxy.getY11(),5));//从图片中读取数据，有起始位置，读的字数
            //中户比例
            
        	chichuangxinxi_tmp.setZhonghu(getGuDongShu(bi,positionxy.getX12(),positionxy.getY11(),5));//从图片中读取数据，有起始位置，读的字数
            //大户比例
           
        	chichuangxinxi_tmp.setDahu(getGuDongShu(bi,positionxy.getX13(),positionxy.getY11(),5));//从图片中读取数据，有起始位置，读的字数
            //法人比例
            
        	chichuangxinxi_tmp.setFaren(getGuDongShu(bi,positionxy.getX14(),positionxy.getY11(),5));//从图片中读取数据，有起始位置，读的字数
            //机构比例
          
        	chichuangxinxi_tmp.setJigou(getGuDongShu(bi,positionxy.getX15(),positionxy.getY11(),5));//从图片中读取数据，有起始位置，读的字数
            
            
            
           
        }
        catch(Exception e)
        {
        	System.out.println(e.getMessage());
        }
		return chichuangxinxi_tmp;
	}
	
	
	
	//字符串"2016-01-16"转回日期型 "2016-01-16"
	public static java.sql.Date strToDate(String aStrValue){
		 String str_year,str_month,str_day;
		 aStrValue=aStrValue.replaceAll("/","").replaceAll("-","").replaceAll(" ","");
		 if(aStrValue.length()==8){
				str_year =aStrValue.substring(0,4);
				str_month=aStrValue.substring(4,6);
				str_day=aStrValue.substring(6);
				
				GregorianCalendar da = new GregorianCalendar(StrToDouble(str_year).intValue(),StrToDouble(str_month).intValue()-1,StrToDouble(str_day).intValue(),21,0,0);   
				
				java.util.Date time = da.getTime();   
				java.sql.Date sqlDate = new java.sql.Date(time.getTime()); 				
				return sqlDate;
		 }
		 return null;
     }  
	//字符串"2016-01-16"转回日期型 "2016-01-16 21:00:00"
	public static java.util.Date strToDateTime(String aStrValue){
		 String str_year,str_month,str_day;
		 aStrValue=aStrValue.replaceAll("/","").replaceAll("-","").replaceAll(" ","");
		 if(aStrValue.length()==8){
				str_year =aStrValue.substring(0,4);
				str_month=aStrValue.substring(4,6);
				str_day=aStrValue.substring(6);
				
				GregorianCalendar da = new GregorianCalendar(StrToDouble(str_year).intValue(),StrToDouble(str_month).intValue()-1,StrToDouble(str_day).intValue(),21,0,0);   
				
				java.util.Date time = da.getTime();   
							
				return time;
		 }
		 return null;
    }  
	public static InputStream URLdownloadFile(String destUrl) throws IOException{//下载文件生成一个流
		ByteArrayInputStream bais = null;
		BufferedInputStream bis = null;
	    HttpURLConnection httpUrl = null;
	    URL url = null;
	    
	    //建立链接
	    try{
		    url = new URL(destUrl);
		   // System.out.println(destUrl);
		    httpUrl = (HttpURLConnection) url.openConnection();
		    //连接指定的资源
		    httpUrl.connect();
		    //获取网络输入流
		    bis = new BufferedInputStream(httpUrl.getInputStream());
		    
		    //is = new InputStream(bis);
		    
		   
		    ByteArrayOutputStream swapStream = new ByteArrayOutputStream();

		    byte[] buff = new byte[100]; //buff用于存放循环读取的临时数据

		    int rc = 0;

		    while ((rc = bis.read(buff, 0, 100)) > 0) {

		    	swapStream.write(buff, 0, rc);

		    }
		    bais  = new ByteArrayInputStream(swapStream.toByteArray());   
	    }
	    catch(Exception e){
	    	
	    }
	    
	    bis.close();
	    httpUrl.disconnect();
	    return bais;
		
	}
	public static Double StrToDouble(String str){  //字符串转为Double
		
		
		Double f =new Double(0);
		if (str.isEmpty() || str.equals(null)){
			return f;
		}
		else{
		//去除","号
			str = str.replaceAll(",","");
			
			try {   
				f = new Double(Double.parseDouble(str));   
			}catch(NumberFormatException   e)
			{
			}
			return f;
		}

	}
	public static boolean isNullOrEmpty(String str)
	{
		if (str == null || str.trim().length() < 1)
		{
			return true;
		} else 
		{
			return false;
		}
	}
	public static String getNullStr(String str, String str1) {
		if (isNullOrEmpty(str)) {
			return str1;
		} else {
			return str;
		}
	}
	public static String getISOStr(String str) {
		try {
			String temp_p;
			temp_p = str;
			temp_p = getNullStr(temp_p, "");
			byte[] temp_t = temp_p.getBytes("GBK");
			String temp = new String(temp_t, "ISO8859_1");
			return temp;
		} catch (Exception e) {
		}
		return "";
	}
	public static String getGBKStr(String str) {
		/*try {
			String temp_p;
			temp_p = str;
			temp_p = getNullStr(temp_p, "");
		//	byte[] temp_t = temp_p.getBytes("ISO8859_1");
			byte[] temp_t = temp_p.getBytes("UTF8");
			String temp = new String(temp_t, "GBK");
			return temp;
			
		} catch (Exception e) {
		}
		return "";
		*/
		return str;
	}
	public static void SendMail(String subject,String msg) {
   		
   		String host = "smtp.gmail.com";   //发件人使用发邮件的电子信箱服务器
	    String from = "sailman0607@gmail.com";    //发邮件的出发地（发件人的信箱）
	    String to = "13580016553@139.com";   //发邮件的目的地（收件人信箱）

	    // Get system properties
	    Properties props = System.getProperties();

	    // Setup mail server
	    props.put("mail.smtp.host", host);

	    // Get session
	    props.put("mail.smtp.auth", "true"); //这样才能通过验证
	    
	    props.put("mail.smtp.starttls.enable","true");
	    
	    javax.mail.Authenticator myauth=new javax.mail.Authenticator(){
	    	private String strUser="sailman0607";
	    	private String strPwd="920708";
	    	 protected PasswordAuthentication getPasswordAuthentication() {
	    	      return new PasswordAuthentication(strUser, strPwd);}
	    	
	    };
	    	
	    
	   
	    javax.mail.Session session = Session.getDefaultInstance(props,myauth);
//	    session.setDebug(true);

	    // Define message
	    javax.mail.internet.MimeMessage message = new MimeMessage(session);
	    
	    try{
		    // Set the from address
		    message.setFrom(new InternetAddress(from));

		    // Set the to address
		    message.addRecipient(Message.RecipientType.TO,
		      new InternetAddress(to));

		    // Set the subject
		//    message.setSubject("测试程序！");
		    message.setSubject(subject);
		    // Set the content
		    message.setText(msg.trim());

		    message.saveChanges();

		    
		    Transport.send(message); 
		      
        } catch (Exception e) {
              
        }
	}
	

	/*
	 * 加入判断系统时间,这有在股票开市时候才工作,星期一到星期五的9:30-11:30,13:00-15:00
	 */
	
	public static boolean isworktime(){
		boolean bool_isworktime=false;
		SimpleDateFormat format = new  SimpleDateFormat("yyyy-MM-dd" );   
		Calendar c = Calendar.getInstance();   
		c.setTime(new Date());   
		int  dayForWeek = 0 ;   
		if (c.get(Calendar.DAY_OF_WEEK) == 1 ){   
			dayForWeek = 7 ;   
		}else {   
			dayForWeek = c.get(Calendar.DAY_OF_WEEK) - 1 ;   
		}   
		if(dayForWeek>0&&dayForWeek<6){
			int hour = c.get(Calendar.HOUR_OF_DAY);
			int min  = c.get(Calendar.MINUTE);
			if (hour==9&&min>29)
				bool_isworktime=true;			
			if(hour==10||hour==13||hour==14)
				bool_isworktime=true;			
			if(hour==11&&min<31)
				bool_isworktime=true;			
		}
		return bool_isworktime;
		
	}
	/*
	 * 生成读取股票实时数据的url字符串，tempurl是传进来用得，i_count判断是不是第一个股票
	 */
	public static String makeurl(String tempurl,String gupiaodaima,int i_count){
		
		if (i_count==0){
			if(MyTools.getJiaoYiShuoYahoo(gupiaodaima).equalsIgnoreCase("SZ"))
				tempurl="http://hq.sinajs.cn/list="+"sz"+gupiaodaima;
			else
				tempurl="http://hq.sinajs.cn/list="+"sh"+gupiaodaima;
		}
		else
		{
			if(MyTools.getJiaoYiShuoYahoo(gupiaodaima).equalsIgnoreCase("SZ"))
				tempurl=tempurl+",sz"+gupiaodaima;
			else
				tempurl=tempurl+",sh"+gupiaodaima;
		}
		return tempurl;
	}
	
	
}
